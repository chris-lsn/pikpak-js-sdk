// Generated by dts-bundle-generator v8.1.2

declare enum TaskStatus {
	PHASE_TYPE_COMPLETE = "PHASE_TYPE_COMPLETE",
	PHASE_TYPE_ERROR = "PHASE_TYPE_ERROR",
	PHASE_TYPE_RUNNING = "PHASE_TYPE_RUNNING"
}
declare enum ThumbnailSize {
	SIZE_SMALL = "SIZE_SMALL",
	SIZE_MEDIUM = "SIZE_MEDIUM",
	SIZE_LARGE = "SIZE_LARGE"
}
declare enum ResourceKind {
	FILE = "drive#file",
	FOLDER = "drive#folder",
	TASK = "drive#task"
}
export interface IPikPakGetFilesRequestFilter {
	id?: string;
	kind?: {
		eq: ResourceKind;
	};
	mime_type?: string;
	phase?: {
		eq: TaskStatus;
	};
	trashed?: {
		eq: boolean;
	};
	starred?: {
		eq: boolean;
	};
	modified_time?: string;
	created_time?: string;
}
export interface IPikPakResponse {
	kind: string;
	quotas: unknown;
	expires_at: string;
}
export interface IPikPakQuotaResponse extends IPikPakResponse {
	quota: {
		limit: string;
		usage: string;
		usage_in_trash: string;
		play_times_limit: string;
		play_times_usage: string;
		is_unlimited: boolean;
	};
}
export interface IPikPakFile {
	id: string;
	parent_id: string;
	name: string;
	user_id: string;
	size: string;
	revision: string;
	file_extension: string;
	mime_type: string;
	starred: boolean;
	web_content_link: string;
	created_time: string;
	modified_time: string;
	icon_link: string;
	thumbnail_link: string;
	md5_checksum: string;
	hash: string;
	links: Record<string, {
		url: string;
		token: string;
		expire: string;
		type: string;
	}>;
	phase: string;
	audit: {
		status: string;
		message: string;
		title: string;
	};
	medias: Array<unknown>;
	trashed: boolean;
	delete_time: string;
	original_url: string;
	params: {
		duration: string;
		height: string;
		platform_icon: string;
		url: string;
		width: string;
	};
	original_file_index: number;
	space: string;
	apps: Array<unknown>;
	writable: boolean;
	folder_type: string;
	collection: unknown;
	sort_name: string;
	user_modified_time: string;
	spell_name: Array<unknown>;
	file_category: string;
	tags: Array<unknown>;
	reference_events: Array<unknown>;
	reference_resource: unknown;
}
export interface IPikPakListFolderResponse extends IPikPakResponse {
	files: Array<IPikPakFile>;
}
export interface IPikPakFileResponse extends IPikPakResponse {
	file: IPikPakFile;
}
export interface IPikPakCreateTaskResponse extends IPikPakResponse {
	upload_type: string;
	url: {
		kind: string;
	};
	file: unknown;
	task: IPikPakTask;
}
export interface IPikPakListTaskResponse {
	tasks: Array<IPikPakTask>;
}
export interface IPikPakTask {
	kind: string;
	id: string;
	name: string;
	type: string;
	user_id: string;
	statuses: Array<string>;
	status_size: number;
	params: {
		age: string;
		predict_speed: string;
		predict_type: string;
		url?: string;
	};
	file_id: string;
	file_name: string;
	file_size: string;
	message: string;
	created_time: string;
	updated_time: string;
	third_task_id: string;
	phase: string;
	progress: number;
	icon_link: string;
	callback: string;
	reference_resource: unknown;
	space: string;
}
declare class PikPak {
	readonly PIKPAK_API_HOST = "https://api-drive.mypikpak.com";
	readonly PIKPAK_USER_HOST = "https://user.mypikpak.com";
	readonly CLIENT_ID = "YNxT9w7GMdWvEOKa";
	readonly CLIENT_SECRET = "dbw2OtmVEeuUvIptb1Coygx";
	readonly CLIENT_VERSION = "2.0.0";
	readonly PAKCAGE_NAME = "mypikpak.com";
	private username;
	private password;
	private accessToken;
	private refreshToken;
	constructor(username: string, password: string);
	getAccessToken(): string;
	getRefreshToken(): string;
	private getHeaders;
	/**
	 * Logs in the user and retrieves access and refresh tokens.
	 * @returns A Promise that resolves to void.
	 */
	login(): Promise<void>;
	/**
	 * Refreshes the access token by making a request to the PIKPAK authentication server.
	 * @returns A Promise that resolves to void.
	 */
	refreshAccessToken(): Promise<void>;
	/**
	 * Creates a task in PikPak.
	 * @param url - The URL of the file to be downloaded.
	 * @param parentFolderId - The ID of the parent folder where the file will be stored.
	 * @param name - The name of the file.
	 * @returns A Promise that resolves to the response containing the created task information.
	 */
	createTask(url: string, parentFolderId: string, name: string): Promise<IPikPakCreateTaskResponse>;
	/**
	 * Deletes a task from PikPak.
	 * @param taskId - The ID of the task to be deleted.
	 * @param deleteFiles - Whether to delete the downloaded files or not.
	 */
	deleteTask(taskId: string, deleteFiles: boolean): Promise<void>;
	/**
	 * Retrieves the task list from the PikPak API.
	 * @returns A promise that resolves to an object representing the task list response.
	 */
	getTasks(statuses?: TaskStatus[]): Promise<IPikPakListTaskResponse>;
	/**
	 * Retrieves a file from the PikPak API based on the provided fileId.
	 * @param fileId The ID of the file to retrieve.
	 * @returns A Promise that resolves to an IPikPakFileResponse object representing the retrieved file.
	 */
	getFile(fileId: string): Promise<IPikPakFileResponse>;
	/**
	 * Retrieves a list of files from the PikPak API.
	 *
	 * @param folderId The ID of the folder to retrieve files from. Defaults to the root folder.
	 * @param limit The maximum number of files to retrieve. Defaults to 500.
	 * @param thumbnailSize The size of the thumbnail to include in the response. Defaults to ThumbnailSize.SIZE_MEDIUM.
	 * @param filters Optional filters to apply to the file list.
	 * @returns A promise that resolves to the list of files in the specified folder.
	 * @throws PikPakException if there is an error retrieving the files.
	 */
	getFiles(folderId?: string, // root folder
	limit?: number, thumbnailSize?: ThumbnailSize, filters?: IPikPakGetFilesRequestFilter): Promise<IPikPakListFolderResponse>;
	/**
	 * Creates a new folder in the PikPak drive.
	 * @param name - The name of the folder.
	 * @param parentFolderId - The ID of the parent folder where the new folder will be created. Defaults to root folder.
	 * @returns A promise that resolves to the created folder object.
	 */
	createFolder(name: string, parentFolderId?: string): Promise<IPikPakFileResponse>;
	/**
	 * Deletes a folder from the PikPak drive.
	 * @param folderIds - The IDs of the folders to be deleted.
	 */
	deleteFolders(folderIds: string[]): Promise<void>;
	/**
	 * Retrieves the quota information from the PikPak API.
	 * @returns A Promise that resolves to an object containing the quota information.
	 */
	getQuota(): Promise<IPikPakQuotaResponse>;
}

export {
	PikPak as default,
};

export {};
